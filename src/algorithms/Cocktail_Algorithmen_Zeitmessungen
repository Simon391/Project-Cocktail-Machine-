# Zeitmessung der Algorithmen nach alpabetischer Sortierung

import time

# Cocktailliste aus dem Dictionary
cocktail_data = {
    "Dark & Stormy Twist": {"Category": "Classic"},
    "Vodka Tonic Cola": {"Category": "Classic"},
    "Rum & Vodka Fusion": {"Category": "Creative"},
    "Cola Tonic Highball": {"Category": "Highball"},
    "Vodka Cola Spritz": {"Category": "Refreshing"},
    "Tonic Rum Cooler": {"Category": "Classic"},
    "Cola Vodka Breeze": {"Category": "Citrus"},
    "Tonic Cola Punch": {"Category": "Party"},
    "Rum & Cola Classic": {"Category": "Classic"},
    "Vodka Tonic Delight": {"Category": "Fresh"}
}

# Sortieralgorithmen
def bubble_sort(arr):
    """Bubble Sort Algorithmus"""
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

def quick_sort(arr):
    """Quick Sort Algorithmus"""
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

def merge_sort(arr):
    """Merge Sort Algorithmus"""
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def insertion_sort(arr):
    """Insertion Sort Algorithmus"""
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

# Funktion zur Zeitmessung
def measure_time(sort_function, arr):
    start_time = time.perf_counter()
    sorted_arr = sort_function(arr.copy())  # Kopie der Liste, um originale Daten zu erhalten
    end_time = time.perf_counter()
    return end_time - start_time

# Mehrere Durchl채ufe f체r Durchschnittswerte
num_iterations = 10
algorithms = {
    "Bubble Sort": bubble_sort,
    "Quick Sort": quick_sort,
    "Merge Sort": merge_sort,
    "Insertion Sort": insertion_sort
}

average_times = {}

for name, algorithm in algorithms.items():
    total_time = 0
    for _ in range(num_iterations):
        total_time += measure_time(algorithm, list(cocktail_data.keys()))
    average_times[name] = total_time / num_iterations

# Ergebnisse ausgeben
for name, avg_time in average_times.items():
    print(f"{name}: Durchschnittliche Laufzeit 체ber {num_iterations} Durchl채ufe: {avg_time:.12f} Sekunden")
