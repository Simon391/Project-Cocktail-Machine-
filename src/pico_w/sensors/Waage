# waage.py

import time
import board
import digitalio

# Klasse zur Ansteuerung des HX711 ADC-Moduls zur Gewichtsmessung mit einer Wägezelle
class HX711:
    def __init__(self, dout_pin, sck_pin, gain=128):
        # Initialisiere die Datenleitungen für DOUT (Datenausgang) und SCK (Takt)
        self.dout = digitalio.DigitalInOut(dout_pin)
        self.dout.direction = digitalio.Direction.INPUT

        self.sck = digitalio.DigitalInOut(sck_pin)
        self.sck.direction = digitalio.Direction.OUTPUT

        # Verstärkungsfaktor (Gain) und Kalibrierparameter
        self.GAIN = 0
        self.OFFSET = 0
        self.SCALE = 1

        # Setze Verstärkung
        self.set_gain(gain)

    def set_gain(self, gain):
        # Konfiguriert den Verstärkungsfaktor des HX711 (128, 64 oder 32)
        if gain == 128:
            self.GAIN = 1  # Kanal A, Gain 128
        elif gain == 64:
            self.GAIN = 3  # Kanal A, Gain 64
        elif gain == 32:
            self.GAIN = 2  # Kanal B, Gain 32
        else:
            raise ValueError('Gain muss 128, 64 oder 32 sein')

        # Lese einmal Rohdaten ein, um Gain-Einstellung zu übernehmen
        self.read_raw()

    def is_ready(self):
        # Gibt zurück, ob Daten zur Verfügung stehen (LOW-Signal bedeutet "bereit")
        return self.dout.value == False

    def read_raw(self):
        # Liest einen Rohwert vom HX711 (24 Bit ADC-Wert)
        while not self.is_ready():
            pass  # Warten, bis Modul bereit ist

        count = 0
        for _ in range(24):
            self.sck.value = True
            count = count << 1
            self.sck.value = False
            if self.dout.value:
                count += 1

        # Sende zusätzliche Taktzyklen zur Auswahl des Kanals/Verstärkung
        for _ in range(self.GAIN):
            self.sck.value = True
            self.sck.value = False

        # Umwandlung in ein vorzeichenbehaftetes 32-Bit-Ergebnis
        if count & 0x800000:  # Negatives Vorzeichenbit gesetzt?
            count |= ~0xffffff  # Zweierkomplement

        return count

    def read_average(self, times=10):
        # Liest mehrfach Rohwerte und gibt den Durchschnitt zurück
        total = 0
        for _ in range(times):
            total += self.read_raw()
        return total // times

    def tare(self, times=15):
        # Führt Tarierung durch (setzt Gewicht auf 0)
        self.OFFSET = self.read_average(times)

    def get_units(self, times=5):
        # Gibt das Gewicht in "Einheiten" zurück (abhängig von SCALE)
        raw_value = self.read_average(times) - self.OFFSET
        return raw_value / self.SCALE

    def set_scale(self, scale):
        # Setzt den Skalierungsfaktor für die Gewichtsausgabe
        self.SCALE = scale


# Beispielnutzung (nur beim direkten Start dieser Datei, dient zum Test)
if __name__ == "__main__":
    hx = HX711(board.GP2, board.GP3)
    hx.set_scale(825.09)  # Kalibrierwert anpassen
    print("Tare...")
    hx.tare()
    while True:
        gewicht = hx.get_units()
        print(f"{int(gewicht)} g")
        time.sleep(1)

